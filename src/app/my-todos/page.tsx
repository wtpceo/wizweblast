'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useUser } from '@clerk/nextjs';
import { Header } from '@/components/Header';
import Link from 'next/link';
import { ClientTodo } from '@/lib/mock-data';
import { format, parseISO } from 'date-fns';
import { ko } from 'date-fns/locale';
import { TodoCard } from '@/components/TodoCard';

export default function MyTodosPage() {
  const [todos, setTodos] = useState<ClientTodo[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [filter, setFilter] = useState<'all' | 'active' | 'completed'>('all');
  const [showDebug, setShowDebug] = useState(false);
  const [debugLog, setDebugLog] = useState<string>('');
  const router = useRouter();
  const { isSignedIn, isLoaded, user } = useUser();

  // ÎîîÎ≤ÑÍ∑∏ Î°úÍ∑∏ Ï∂îÍ∞Ä Ìï®Ïàò
  const addDebugLog = (message: string) => {
    setDebugLog(prev => `${new Date().toLocaleTimeString()}: ${message}\n${prev}`);
  };

  // Ï∫êÏãú ÏÇ≠Ï†ú Ìï®Ïàò
  const clearTodoCache = () => {
    try {
      const keys = Object.keys(localStorage);
      let count = 0;
      
      keys.forEach(key => {
        if (key.startsWith('wizweblast_todos') || key.includes('todos_client_')) {
          localStorage.removeItem(key);
          count++;
        }
      });
      
      addDebugLog(`${count}Í∞úÏùò Ìï† Ïùº Í¥ÄÎ†® Ï∫êÏãúÍ∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.`);
      
      // Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®
      fetchTodos();
    } catch (err) {
      addDebugLog(`Ï∫êÏãú ÏÇ≠Ï†ú Ï§ë Ïò§Î•ò Î∞úÏÉù: ${err instanceof Error ? err.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`);
    }
  };

  // Ìï† Ïùº Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
  const fetchTodos = async () => {
    try {
      setIsLoading(true);
      addDebugLog('Ìï† Ïùº Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞ ÏãúÏûë');
      
      // APIÏóêÏÑú Ìï† Ïùº Î™©Î°ù Ï°∞Ìöå
      const userId = user?.id;
      if (!userId) {
        addDebugLog('ÏÇ¨Ïö©Ïûê IDÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå. Î°úÍ∑∏Ïù∏ ÌôïÏù∏ ÌïÑÏöî');
        return;
      }
      
      // API ÏöîÏ≤≠ (ÏóêÎü¨ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ìè¨Ìï®)
      const response = await fetch(`/api/todos?assignedTo=${userId}`);
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ error: 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò' }));
        addDebugLog(`API Ïò§Î•ò (${response.status}): ${errorData.error || response.statusText}`);
        throw new Error(`Ìï† Ïùº Î™©Î°ùÏùÑ Í∞ÄÏ†∏Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§. (${response.status}: ${errorData.error || response.statusText})`);
      }
      
      const data = await response.json();
      addDebugLog(`${data.length}Í∞ú Ìï† Ïùº Îç∞Ïù¥ÌÑ∞ Î∞õÏùå`);
      
      // Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• Î∞è ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      setTodos(data);
      setError(null);
      
      // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóê Ï∫êÏã± (ÏàúÏàòÌïòÍ≤å Ïò§ÌîÑÎùºÏù∏ Î≥µÍµ¨Ïö©)
      try {
        localStorage.setItem('wizweblast_todos', JSON.stringify(data));
        addDebugLog('Ìï† Ïùº Îç∞Ïù¥ÌÑ∞ Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóê Î∞±ÏóÖ ÏôÑÎ£å (Ïò§ÌîÑÎùºÏù∏ Î≥µÍµ¨Ïö©)');
      } catch (storageErr) {
        console.error('Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄ Ï†ÄÏû• Ïò§Î•ò:', storageErr);
        addDebugLog(`Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄ Ï†ÄÏû• Ïò§Î•ò: ${storageErr instanceof Error ? storageErr.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`);
      }
    } catch (err) {
      console.error('Ìï† Ïùº Î™©Î°ù Î°úÎî© Ïò§Î•ò:', err);
      setError(err instanceof Error ? err.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
      addDebugLog(`Ìï† Ïùº Î™©Î°ù Î°úÎî© Ïò§Î•ò: ${err instanceof Error ? err.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`);
      
      // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú Î≥µÍµ¨ ÏãúÎèÑ (ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò ÏãúÏóêÎßå)
      try {
        addDebugLog('ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•òÎ°ú Î°úÏª¨ Î∞±ÏóÖÏóêÏÑú Î≥µÍµ¨ ÏãúÎèÑ Ï§ë');
        const storedTodos = localStorage.getItem('wizweblast_todos');
        if (storedTodos) {
          const parsedTodos = JSON.parse(storedTodos);
          if (Array.isArray(parsedTodos) && parsedTodos.length > 0) {
            console.log('[Î°úÏª¨] Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú Ìï† Ïùº Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨ÏôîÏäµÎãàÎã§:', parsedTodos.length + 'Í∞ú');
            addDebugLog(`Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú ${parsedTodos.length}Í∞ú Ìï† Ïùº ÏûÑÏãú Î≥µÍµ¨ (ÏÑúÎ≤Ñ Ïó∞Í≤∞ Ïãú ÏûêÎèô Í∞±Ïã†Îê®)`);
            setTodos(parsedTodos);
          }
        }
      } catch (parseErr) {
        console.error('[Î°úÏª¨] Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄ Îç∞Ïù¥ÌÑ∞ ÌååÏã± Ïò§Î•ò:', parseErr);
        addDebugLog(`Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄ ÌååÏã± Ïò§Î•ò: ${parseErr instanceof Error ? parseErr.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`);
      }
    } finally {
      setIsLoading(false);
    }
  };
  
  // Ìï† Ïùº ÏôÑÎ£å Ï≤òÎ¶¨
  const handleToggleComplete = async (todoId: string, currentStatus: boolean) => {
    try {
      addDebugLog(`Ìï† Ïùº ID ${todoId} ÏôÑÎ£å ÏÉÅÌÉú Î≥ÄÍ≤Ω ÏãúÏûë (${currentStatus} ‚Üí ${!currentStatus})`);
      
      // ÏòµÌã∞ÎØ∏Ïä§Ìã± UI ÏóÖÎç∞Ïù¥Ìä∏
      const updatedTodos = todos.map(todo => 
        todo.id === todoId 
          ? { 
              ...todo, 
              completed: !currentStatus,
              completedAt: !currentStatus ? new Date().toISOString() : undefined
            } 
          : todo
      );
      
      setTodos(updatedTodos);
      addDebugLog('UI ÏòµÌã∞ÎØ∏Ïä§Ìã± ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å');
      
      // ÏûÑÏãú ID(temp-)Î°ú ÏãúÏûëÌïòÎäî Ìï† ÏùºÏùÄ Î°úÏª¨ÏóêÏÑúÎßå Ï≤òÎ¶¨
      if (todoId.startsWith('temp-')) {
        addDebugLog('ÏûÑÏãú Ìï† Ïùº(temp-)Ïù¥ÎØÄÎ°ú Î°úÏª¨ÏóêÏÑúÎßå ÏÉÅÌÉú Î≥ÄÍ≤Ω Ï≤òÎ¶¨');
        
        // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄ ÏóÖÎç∞Ïù¥Ìä∏
        try {
          const storedTodos = localStorage.getItem('wizweblast_todos');
          if (storedTodos) {
            const parsedTodos = JSON.parse(storedTodos);
            const updatedStoredTodos = parsedTodos.map((todo: any) => 
              todo.id === todoId 
                ? { 
                    ...todo, 
                    completed: !currentStatus,
                    completedAt: !currentStatus ? new Date().toISOString() : undefined
                  } 
                : todo
            );
            localStorage.setItem('wizweblast_todos', JSON.stringify(updatedStoredTodos));
            addDebugLog('Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å');
          }
          addDebugLog('ÏûÑÏãú Ìï† Ïùº ÏÉÅÌÉú Î≥ÄÍ≤Ω ÏôÑÎ£å');
          return; // API Ìò∏Ï∂ú ÏóÜÏù¥ Ìï®Ïàò Ï¢ÖÎ£å
        } catch (storageErr) {
          console.error('Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄ ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò:', storageErr);
          addDebugLog(`Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄ ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò: ${storageErr instanceof Error ? storageErr.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`);
        }
      }
      
      // ÏÉàÎ°úÏö¥ API ÏóîÎìúÌè¨Ïù∏Ìä∏ ÏÇ¨Ïö©
      addDebugLog('ÏÉà API ÏóîÎìúÌè¨Ïù∏Ìä∏ Ìò∏Ï∂ú ÏãúÏûë: /api/todos/' + todoId + '/toggle');
      const response = await fetch(`/api/todos/${todoId}/toggle`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        }
      });
      
      // ÏùëÎãµ Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú (Ïò§Î•ò Ï≤òÎ¶¨Î•º Ìè¨Ìï®ÌïòÏó¨)
      let data;
      try {
        data = await response.json();
      } catch (parseError) {
        console.error('ÏùëÎãµ ÌååÏã± Ïò§Î•ò:', parseError);
        addDebugLog(`ÏùëÎãµ ÌååÏã± Ïò§Î•ò: ${parseError instanceof Error ? parseError.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`);
        throw new Error('ÏÑúÎ≤Ñ ÏùëÎãµÏùÑ Ï≤òÎ¶¨Ìï† Ïàò ÏóÜÏäµÎãàÎã§.');
      }
      
      if (!response.ok) {
        // API Ïã§Ìå® Ïãú Î°§Î∞±
        setTodos(todos);
        
        // Ïä§ÌÇ§Îßà Ïò§Î•òÏù∏ Í≤ΩÏö∞, Ïä§ÌÇ§Îßà ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÎèÑ
        if (data.suggestion && data.suggestion.includes('/api/update-todos-schema')) {
          addDebugLog('Ïä§ÌÇ§Îßà ÏóÖÎç∞Ïù¥Ìä∏ ÌïÑÏöî: ' + data.message);
          
          // Ïä§ÌÇ§Îßà ÏóÖÎç∞Ïù¥Ìä∏ API Ìò∏Ï∂ú
          const schemaUpdateResponse = await fetch('/api/update-todos-schema', {
            method: 'POST'
          });
          
          if (schemaUpdateResponse.ok) {
            addDebugLog('Ïä§ÌÇ§Îßà ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ±Í≥µ, Îã§Ïãú ÏãúÎèÑÌï©ÎãàÎã§.');
            // Îã§Ïãú API Ìò∏Ï∂ú
            return handleToggleComplete(todoId, currentStatus);
          } else {
            addDebugLog('Ïä§ÌÇ§Îßà ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®');
          }
        }
        
        addDebugLog(`API Ïò§Î•ò (${response.status}): ${data.error || 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`);
        throw new Error(data.error || `ÏÉÅÌÉú Î≥ÄÍ≤ΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. (${response.status})`);
      }
      
      console.log('Ìï† Ïùº ÏôÑÎ£å ÏÉÅÌÉú Î≥ÄÍ≤Ω ÏùëÎãµ:', data);
      addDebugLog(`API ÏùëÎãµ ÏÑ±Í≥µ: ${data.success ? 'ÏÑ±Í≥µ' : 'Ïã§Ìå®'}`);
      
      if (data.success && data.todo) {
        // API ÏùëÎãµÏùò todo Îç∞Ïù¥ÌÑ∞Î°ú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        const updatedTodo = {
          ...data.todo,
          // ÏùºÎ∂Ä ÌïÑÎìúÍ∞Ä ÏóÜÏùÑ Í≤ΩÏö∞Ïóê ÎåÄÎπÑÌïú Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
          clientId: data.todo.clientId || data.todo.client_id || todoId,
          clientName: data.todo.clientName || 'Í¥ëÍ≥†Ï£º',
          clientIcon: data.todo.clientIcon || 'üè¢',
          content: data.todo.content || 'Ìï† Ïùº',
          assignedTo: data.todo.assignedTo || data.todo.assigned_to || user?.id,
          completed: data.todo.completed,
          createdAt: data.todo.createdAt || data.todo.created_at || new Date().toISOString(),
          completedAt: data.todo.completedAt || data.todo.completed_at || undefined
        };
        
        addDebugLog(`ÏóÖÎç∞Ïù¥Ìä∏Îêú Ìï† Ïùº Îç∞Ïù¥ÌÑ∞: ÏôÑÎ£å=${updatedTodo.completed}, ÏôÑÎ£åÏùº=${updatedTodo.completedAt || 'ÏóÜÏùå'}`);
        
        // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        setTodos(prevTodos => prevTodos.map(todo => 
          todo.id === todoId ? { ...todo, ...updatedTodo } : todo
        ));
        
        // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄ ÏóÖÎç∞Ïù¥Ìä∏
        try {
          const storedTodos = localStorage.getItem('wizweblast_todos');
          if (storedTodos) {
            const parsedTodos = JSON.parse(storedTodos);
            const updatedStoredTodos = parsedTodos.map((todo: any) => 
              todo.id === todoId ? { ...todo, ...updatedTodo } : todo
            );
            localStorage.setItem('wizweblast_todos', JSON.stringify(updatedStoredTodos));
            addDebugLog('Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å');
          }
        } catch (storageErr) {
          console.error('Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄ ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò:', storageErr);
          addDebugLog(`Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄ ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò: ${storageErr instanceof Error ? storageErr.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`);
        }
      } else {
        // ÏÑúÎ≤Ñ ÏùëÎãµÏù¥ ÏÑ±Í≥µÏù¥ÏßÄÎßå todo Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÎäî Í≤ΩÏö∞, Í∏∞Ï°¥ ÏòµÌã∞ÎØ∏Ïä§Ìã± ÏóÖÎç∞Ïù¥Ìä∏ Ïú†ÏßÄ
        addDebugLog('ÏÑúÎ≤Ñ ÏùëÎãµÏóê todo Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§. ÏòµÌã∞ÎØ∏Ïä§Ìã± ÏóÖÎç∞Ïù¥Ìä∏Î•º Ïú†ÏßÄÌï©ÎãàÎã§.');
      }
    } catch (err) {
      console.error('Ìï† Ïùº ÏÉÅÌÉú Î≥ÄÍ≤Ω Ïò§Î•ò:', err);
      addDebugLog(`Ìï† Ïùº ÏÉÅÌÉú Î≥ÄÍ≤Ω Ïò§Î•ò: ${err instanceof Error ? err.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`);
      
      // Ï°∞Ïö©Ìûà Ïò§Î•ò Ï≤òÎ¶¨ - ÏÇ¨Ïö©Ïûê Í≤ΩÌóòÏùÑ Î∞©Ìï¥ÌïòÏßÄ ÏïäÎèÑÎ°ù
      if (process.env.NODE_ENV !== 'development') {
        // ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤ΩÏóêÏÑúÎßå ÏïåÎ¶º ÌëúÏãú
        alert('ÏÉÅÌÉú Î≥ÄÍ≤Ω Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. ÌéòÏù¥ÏßÄÎ•º ÏÉàÎ°úÍ≥†Ïπ®ÌïòÍ≥† Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
      }
      
      // Î°§Î∞±
      setTodos(todos);
    }
  };
  
  // Ìï† Ïùº ÏÇ≠Ï†ú Ï≤òÎ¶¨
  const handleDeleteTodo = async (todoId: string) => {
    try {
      // ÏòµÌã∞ÎØ∏Ïä§Ìã± UI ÏóÖÎç∞Ïù¥Ìä∏
      const updatedTodos = todos.filter(todo => todo.id !== todoId);
      setTodos(updatedTodos);
      
      // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄ ÏóÖÎç∞Ïù¥Ìä∏
      try {
        localStorage.setItem('wizweblast_todos', JSON.stringify(updatedTodos));
      } catch (storageErr) {
        console.error('Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄ ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò:', storageErr);
      }
      
      // ÏûÑÏãú ID(temp-)Î°ú ÏãúÏûëÌïòÎäî Ìï† ÏùºÏùÄ Î°úÏª¨ÏóêÏÑúÎßå Ï≤òÎ¶¨
      if (todoId.startsWith('temp-')) {
        addDebugLog(`ÏûÑÏãú Ìï† Ïùº ID ${todoId} Î°úÏª¨ÏóêÏÑúÎßå ÏÇ≠Ï†ú Ï≤òÎ¶¨ ÏôÑÎ£å`);
        return; // API Ìò∏Ï∂ú ÏóÜÏù¥ Ìï®Ïàò Ï¢ÖÎ£å
      }
      
      // API Ìò∏Ï∂ú
      const response = await fetch(`/api/todos?todoId=${todoId}`, {
        method: 'DELETE',
      });
      
      if (!response.ok) {
        // API Ïã§Ìå® Ïãú Î°§Î∞±
        setTodos(todos);
        throw new Error('Ìï† Ïùº ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
      
      const data = await response.json();
      console.log('Ìï† Ïùº ÏÇ≠Ï†ú ÏÑ±Í≥µ:', data);
      
      // Ïû¨Ï°∞Ìöå
      fetchTodos();
    } catch (err) {
      console.error('Ìï† Ïùº ÏÇ≠Ï†ú Ïò§Î•ò:', err);
      alert('Ìï† Ïùº ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };
  
  // Í¥ëÍ≥†Ï£ºÎ≥ÑÎ°ú Ìï† Ïùº Í∑∏Î£πÌôî
  const getTodosByClient = () => {
    let filteredTodos = todos;
    
    // ÌïÑÌÑ∞ Ï†ÅÏö©
    if (filter === 'active') {
      filteredTodos = todos.filter(todo => !todo.completed);
    } else if (filter === 'completed') {
      filteredTodos = todos.filter(todo => todo.completed);
    }
    
    // Í¥ëÍ≥†Ï£ºÎ≥ÑÎ°ú Í∑∏Î£πÌôî
    const groupedTodos: Record<string, ClientTodo[]> = {};
    
    filteredTodos.forEach(todo => {
      const clientId = todo.clientId;
      if (!groupedTodos[clientId]) {
        groupedTodos[clientId] = [];
      }
      groupedTodos[clientId].push(todo);
    });
    
    return groupedTodos;
  };
  
  // Í¥ëÍ≥†Ï£ºÎ≥Ñ Í∑∏Î£πÌôîÎêú Ìï† Ïùº
  const todosByClient = getTodosByClient();
  
  // Î°úÍ∑∏Ïù∏ Ïú†Î¨¥ ÌôïÏù∏
  useEffect(() => {
    if (isLoaded && !isSignedIn) {
      router.push('/');
    } else if (isLoaded && isSignedIn) {
      fetchTodos();
    }
  }, [isLoaded, isSignedIn, router]);
  
  // Î°úÎî© Ï§ëÏùº Îïå ÌëúÏãúÌï† ÌôîÎ©¥
  if (!isLoaded || isLoading) {
    return (
      <div className="min-h-screen bg-[#F9FAFD] flex items-center justify-center">
        <div className="text-center">
          <div className="w-12 h-12 rounded-full border-4 border-[#2251D1] border-t-transparent animate-spin mb-4 mx-auto"></div>
          <p className="text-lg text-[#2251D1] font-medium">Î°úÎî© Ï§ë...</p>
        </div>
      </div>
    );
  }
  
  return (
    <div className="min-h-screen bg-[#F9FAFD]">
      <Header
        title="ÎÇòÏùò Ìï† Ïùº Î™©Î°ù"
        description="Îì±Î°ùÌïú Î™®Îì† Ìï† ÏùºÏùÑ Î≥¥Í≥† Í¥ÄÎ¶¨ÌïòÏÑ∏Ïöî"
        icon="‚úÖ"
        actions={
          <div className="flex space-x-2">
            <button
              onClick={() => setShowDebug(!showDebug)}
              className="bg-gray-600 text-white px-3 py-2 rounded-lg hover:bg-gray-700 text-sm"
            >
              {showDebug ? 'ÎîîÎ≤ÑÍ∑∏ Ïà®Í∏∞Í∏∞' : 'ÎîîÎ≤ÑÍ∑∏ Î≥¥Í∏∞'}
            </button>
            <button
              onClick={clearTodoCache}
              className="bg-red-600 text-white px-3 py-2 rounded-lg hover:bg-red-700 text-sm"
            >
              Ï∫êÏãú ÏÇ≠Ï†ú
            </button>
            <Link href="/dashboard" className="bg-white text-[#2251D1] px-4 py-2 rounded-lg hover:bg-opacity-90 transition-all duration-200 flex items-center text-sm font-medium shadow-sm hover:shadow">
              <span className="mr-2">üìä</span> ÎåÄÏãúÎ≥¥ÎìúÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
            </Link>
          </div>
        }
      />
      
      <div className="container mx-auto px-4 py-6">
        {/* ÎîîÎ≤ÑÍ∑∏ Ìå®ÎÑê */}
        {showDebug && (
          <div className="bg-gray-800 text-green-400 p-4 mb-6 rounded-lg overflow-auto" style={{ maxHeight: '300px' }}>
            <h3 className="text-white font-mono mb-2">ÎîîÎ≤ÑÍ∑∏ Î°úÍ∑∏:</h3>
            <pre className="font-mono text-xs whitespace-pre-wrap">{debugLog || 'Î°úÍ∑∏Í∞Ä ÏóÜÏäµÎãàÎã§.'}</pre>
          </div>
        )}
        
        {/* ÌïÑÌÑ∞ ÌÉ≠ */}
        <div className="bg-white rounded-lg shadow-sm mb-6 p-4">
          <div className="flex justify-between items-center">
            <div className="flex items-center space-x-2">
              <button
                onClick={() => setFilter('all')}
                className={`px-4 py-2 rounded-lg transition-colors ${
                  filter === 'all' 
                    ? 'bg-[#2251D1] text-white'
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}
              >
                Ï†ÑÏ≤¥ Ìï† Ïùº
              </button>
              <button
                onClick={() => setFilter('active')}
                className={`px-4 py-2 rounded-lg transition-colors ${
                  filter === 'active' 
                    ? 'bg-[#4CAF50] text-white'
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}
              >
                ÏßÑÌñâ Ï§ë
              </button>
              <button
                onClick={() => setFilter('completed')}
                className={`px-4 py-2 rounded-lg transition-colors ${
                  filter === 'completed' 
                    ? 'bg-[#9E9E9E] text-white'
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}
              >
                ÏôÑÎ£åÎê®
              </button>
            </div>
            <div className="text-sm text-gray-500">
              Ï¥ù {todos.length}Í∞úÏùò Ìï† Ïùº, {todos.filter(t => t.completed).length}Í∞ú ÏôÑÎ£åÎê®
            </div>
          </div>
        </div>
        
        {/* Ïò§Î•ò Î©îÏãúÏßÄ */}
        {error && (
          <div className="bg-red-50 border border-red-200 text-red-700 rounded-lg p-4 mb-6">
            <h3 className="font-medium flex items-center mb-1">
              <span className="mr-2">‚ö†Ô∏è</span> Ïò§Î•ò Î∞úÏÉù
            </h3>
            <p className="text-sm">{error}</p>
            <button 
              onClick={fetchTodos} 
              className="mt-2 text-red-700 bg-white border border-red-300 px-3 py-1 rounded-md text-sm hover:bg-red-50"
            >
              Îã§Ïãú ÏãúÎèÑ
            </button>
          </div>
        )}
        
        {/* Ìï† Ïùº Î™©Î°ùÏù¥ ÎπÑÏñ¥ÏûàÎäî Í≤ΩÏö∞ */}
        {Object.keys(todosByClient).length === 0 && (
          <div className="bg-white rounded-lg shadow-sm p-8 text-center">
            <div className="text-6xl mb-4">üîç</div>
            <h3 className="text-xl font-medium mb-2">Ìï† ÏùºÏù¥ ÏóÜÏäµÎãàÎã§</h3>
            <p className="text-gray-500 mb-4">
              {filter === 'all' 
                ? 'ÏïÑÏßÅ Îì±Î°ùÎêú Ìï† ÏùºÏù¥ ÏóÜÏäµÎãàÎã§. Í¥ëÍ≥†Ï£º ÌéòÏù¥ÏßÄÏóêÏÑú Ìï† ÏùºÏùÑ Ï∂îÍ∞ÄÌï¥Î≥¥ÏÑ∏Ïöî.'
                : filter === 'active'
                  ? 'Î™®Îì† Ìï† ÏùºÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!'
                  : 'ÏôÑÎ£åÎêú Ìï† ÏùºÏù¥ ÏóÜÏäµÎãàÎã§.'}
            </p>
            <Link 
              href="/clients"
              className="inline-block bg-[#2251D1] text-white px-4 py-2 rounded-lg hover:bg-[#1a3fa0] transition-all"
            >
              Í¥ëÍ≥†Ï£º Î™©Î°ùÏúºÎ°ú Ïù¥Îèô
            </Link>
          </div>
        )}
        
        {/* Í¥ëÍ≥†Ï£ºÎ≥Ñ Ìï† Ïùº Î™©Î°ù */}
        {Object.keys(todosByClient).length > 0 ? (
          Object.entries(todosByClient).map(([clientId, clientTodos]) => (
            <div key={clientId} className="bg-white rounded-lg shadow-sm mb-6 overflow-hidden">
              <div className="bg-[#EEF2FB] px-6 py-4 border-b border-gray-200">
                <h3 className="text-lg font-bold flex items-center">
                  <span className="text-xl mr-2">{clientTodos[0].clientIcon || 'üè¢'}</span>
                  <Link href={`/clients/${clientId}`} className="hover:underline text-[#2251D1]">
                    {clientTodos[0].clientName || 'Í¥ëÍ≥†Ï£º'}
                  </Link>
                  <span className="ml-2 text-sm font-normal text-gray-500">
                    {clientTodos.length}Í∞úÏùò Ìï† Ïùº
                  </span>
                </h3>
              </div>
              
              <div className="p-4">
                {clientTodos.map(todo => (
                  <div key={todo.id} className="mb-3">
                    <TodoCard 
                      todo={todo} 
                      onComplete={handleToggleComplete}
                      onDelete={handleDeleteTodo}
                    />
                  </div>
                ))}
              </div>
            </div>
          ))
        ) : (
          <div className="bg-white rounded-lg shadow-sm p-8 text-center">
            <div className="text-6xl mb-4">üéâ</div>
            <h3 className="text-xl font-medium mb-2">
              {filter === 'all' 
                ? 'Ìï† ÏùºÏù¥ ÏóÜÏäµÎãàÎã§' 
                : filter === 'active' 
                  ? 'Î™®Îì† Ìï† ÏùºÏùÑ ÏôÑÎ£åÌñàÏäµÎãàÎã§!' 
                  : 'ÏôÑÎ£åÎêú Ìï† ÏùºÏù¥ ÏóÜÏäµÎãàÎã§'
              }
            </h3>
            <p className="text-gray-500 mb-4">
              {filter === 'all' 
                ? 'Í¥ëÍ≥†Ï£º ÌéòÏù¥ÏßÄÏóêÏÑú ÏÉàÎ°úÏö¥ Ìï† ÏùºÏùÑ Ï∂îÍ∞ÄÌï¥Î≥¥ÏÑ∏Ïöî.' 
                : filter === 'active' 
                  ? 'Ïûò ÌïòÏÖ®Ïñ¥Ïöî! Îã§Î•∏ Ìï† ÏùºÏù¥ Ï∂îÍ∞ÄÎêòÎ©¥ Ïó¨Í∏∞Ïóê ÌëúÏãúÎê©ÎãàÎã§.' 
                  : 'Ìï† ÏùºÏùÑ ÏôÑÎ£åÌïòÎ©¥ Ïù¥Í≥≥Ïóê ÌëúÏãúÎê©ÎãàÎã§.'
              }
            </p>
          </div>
        )}
      </div>
    </div>
  );
} 